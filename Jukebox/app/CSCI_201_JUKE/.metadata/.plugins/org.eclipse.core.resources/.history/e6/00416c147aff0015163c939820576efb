package server;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import client.PlaylistSong;
import client.Song;

public class DatabaseConnector {
	
	//private String hostname;
	//private Integer port;
	private Connection conn;
	
	public DatabaseConnector() {         //(String hostname, Integer port) {
		//this.hostname = hostname;
		//this.port = port;
		this.conn = null;
	}
	
	
	// checks if a user exists in the database by comparing against a given username
	public Boolean userExists(String username) {
		Boolean exists = false;
		try {
			Class.forName(Constants.jdbc);
			conn = DriverManager.getConnection(Constants.connection);
			
			PreparedStatement ps = conn.prepareStatement("SELECT * FROM User WHERE username=?");
			ps.setString(1, username);
			java.sql.ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				exists = true;
			} 
			rs.close();
		} catch (SQLException sqle) {
			System.out.println("sqle: " + sqle.getMessage());
		} catch (ClassNotFoundException cnfe) {
			System.out.println("cnfe: " + cnfe.getMessage());
		} finally {
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException sqle) {
				System.out.println("sqle closing conn: " + sqle.getMessage());
			}
		}
		
		return exists;
	}
	
	
	// Creates a new user in the database with the given username, email, and password
	// Assumes no QR Code in Database
	public Boolean createUser(String username, String email, String password) {
		Boolean created = false;
		
		// hash password
		password = hashPassword(password);
		
		try {
			Class.forName(Constants.jdbc);
			conn = DriverManager.getConnection(Constants.connection);
			
			// check if user exists
			PreparedStatement ps = conn.prepareStatement("SELECT * FROM User WHERE username=?");
			ps.setString(1, username);
			ResultSet rs = ps.executeQuery();
			if (!rs.next()) { // if user doesn't exist
				ps = conn.prepareStatement("INSERT INTO User (username, pass, email) VALUES (?,?,?)");
				ps.setString(1, username);
				ps.setString(2, password);
				ps.setString(3, email);
				int added = ps.executeUpdate();
				if (added == 1)
					created = true;
			} 
			rs.close();
		} catch (SQLException sqle) {
			System.out.println("sqle: " + sqle.getMessage());
		} catch (ClassNotFoundException cnfe) {
			System.out.println("cnfe: " + cnfe.getMessage());
		} finally {
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException sqle) {
				System.out.println("sqle closing conn: " + sqle.getMessage());
			}
		}
	
		return created;
	}
	
	
	// Returns whether a user with a given username and password exists in the database
	public Boolean login(String username, String password) {
		Boolean loggedin = false;
		
		// hash password
		password = hashPassword(password);
		
		try {
			Class.forName(Constants.jdbc);
			conn = DriverManager.getConnection(Constants.connection);
			
			// check if user exists
			PreparedStatement ps = conn.prepareStatement("SELECT * FROM User WHERE username=? AND pass=?");
			ps.setString(1, username);
			ps.setString(2, password);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) { // if user exists
				loggedin = true;
			} 
			rs.close();
		} catch (SQLException sqle) {
			System.out.println("sqle: " + sqle.getMessage());
		} catch (ClassNotFoundException cnfe) {
			System.out.println("cnfe: " + cnfe.getMessage());
		} finally {
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException sqle) {
				System.out.println("sqle closing conn: " + sqle.getMessage());
			}
		}
		
		return loggedin;
	}
	
	
	// Returns an ArrayList containing a given user's friends
	public ArrayList<String> getFriends(String username) {
		ArrayList<String> friends = new ArrayList<String>();
		
		try {
			Class.forName(Constants.jdbc);
			conn = DriverManager.getConnection(Constants.connection);
			
			// check if user exists
			PreparedStatement ps = conn.prepareStatement("SELECT * FROM User WHERE username=?");
			ps.setString(1, username);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) { // if user exists
				ps = conn.prepareStatement("SELECT * FROM Friend where followerID=?");
				ps.setString(1, username);
				rs.close();
				rs = ps.executeQuery();
				while(rs.next()) {
					String friendID = rs.getString("followedID");
					friends.add(friendID);
				}
			} 
			rs.close();
		} catch (SQLException sqle) {
			System.out.println("sqle: " + sqle.getMessage());
		} catch (ClassNotFoundException cnfe) {
			System.out.println("cnfe: " + cnfe.getMessage());
		} finally {
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException sqle) {
				System.out.println("sqle closing conn: " + sqle.getMessage());
			}
		}
		
		return friends;
	}
	
	
	// Updates a current user to follow another user in the database
	public Boolean followFriend(String currentUsername, String toFollowUsername) {
		Boolean followed = false;
		
		try {
			Class.forName(Constants.jdbc);
			conn = DriverManager.getConnection(Constants.connection);
			
			// check if user exists
			PreparedStatement ps = conn.prepareStatement("SELECT * FROM User WHERE username=?");
			ps.setString(1, currentUsername);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) { // if user exists
				ps.setString(1, toFollowUsername);
				rs.close();
				rs = ps.executeQuery();
				if (rs.next()) { // if user to follow exists
					ps = conn.prepareStatement("INSERT INTO Friend (followerID, followedID) VALUES (?,?)");
					ps.setString(1, currentUsername);
					ps.setString(2,toFollowUsername);
					int added = ps.executeUpdate();
					if (added == 1) { // if completed update successfully
						followed = true;
					}
				}
			} 
			rs.close();
		} catch (SQLException sqle) {
			System.out.println("sqle: " + sqle.getMessage());
		} catch (ClassNotFoundException cnfe) {
			System.out.println("cnfe: " + cnfe.getMessage());
		} finally {
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException sqle) {
				System.out.println("sqle closing conn: " + sqle.getMessage());
			}
		}
		
		return followed;
			
	}
	
	// checks if a playlist exists for a specific playlistname and username in the database
	public Boolean playlistExists(String playlistname,String username) {
		Boolean exists = false;
		
		try {
			Class.forName(Constants.jdbc);
			conn = DriverManager.getConnection(Constants.connection);
			
			// check if user exists
			PreparedStatement ps = conn.prepareStatement("SELECT * FROM Playlist WHERE playlistname=? AND userID=?");
			ps.setString(1, playlistname);
			ps.setString(2, username);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) { // if user exists
				exists = true;
			} 
			rs.close();
		} catch (SQLException sqle) {
			System.out.println("sqle: " + sqle.getMessage());
		} catch (ClassNotFoundException cnfe) {
			System.out.println("cnfe: " + cnfe.getMessage());
		} finally {
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException sqle) {
				System.out.println("sqle closing conn: " + sqle.getMessage());
			}
		}
		
		return exists;
	}
	
	// inserts a new playlist into the database given a playlistname, username, and filepath (songs in playlist is also required
	public Boolean createPlaylist(String playlistname, String username, String filepath, List<PlaylistSong> songs) {
		Boolean created = false;
		
		try {
			Class.forName(Constants.jdbc);
			conn = DriverManager.getConnection(Constants.connection);
			
			// check if playlist exists
			PreparedStatement ps = conn.prepareStatement("SELECT * FROM Playlist WHERE playlistname=? AND userID=?");
			ps.setString(1, playlistname);
			ps.setString(2, username);
			ResultSet rs = ps.executeQuery();
			if (!rs.next()) { // if playlist doesn't exist
				// Insert into Playlist Table
				ps = conn.prepareStatement("INSERT INTO Playlist (playlistname, userID, filepath) VALUES (?,?,?)");
				ps.setString(1, playlistname);
				ps.setString(2, username);
				ps.setString(3, filepath);
				int added = ps.executeUpdate();
				// Get playlistID
				ps = conn.prepareStatement("SELECT * FROM Playlist WHERE playlistname=? AND userID=? AND filepath=?");
				rs.close();
				ps.setString(1, playlistname);
				ps.setString(2, username);
				ps.setString(3, filepath);
				rs = ps.executeQuery();
				Integer playlistID = rs.getInt("playlistID");	
				// Add each song to PlaylistContent Table
				ps = conn.prepareStatement("INSERT INTO PlaylistContent (playlistID, songIndex, songName, songArtist) VALUES (?,?,?,?)");
				for (int i = 1; i <= songs.size(); i++) {
					Song song = songs.get(i).getSong();
					String artist = song.getSongArtist();
					String name = song.getSongName();
					ps.setInt(1, playlistID);
					ps.setInt(2, i);
					ps.setString(3, name);
					ps.setString(4, artist);
					ps.executeUpdate();	
				}
				if (added == 1)
					created = true;
			} 
			rs.close();
		} catch (SQLException sqle) {
			System.out.println("sqle: " + sqle.getMessage());
		} catch (ClassNotFoundException cnfe) {
			System.out.println("cnfe: " + cnfe.getMessage());
		} finally {
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException sqle) {
				System.out.println("sqle closing conn: " + sqle.getMessage());
			}
		}
	
		return created;
		
	}
	
	// Copies one user's playlist
	public Boolean copyPlaylist(String currentUserName, String SelectedUserName, String playlistname) {
		Boolean copied = false;
		
		try {
			Class.forName(Constants.jdbc);
			conn = DriverManager.getConnection(Constants.connection);
			
			// check if playlist exists
			PreparedStatement ps = conn.prepareStatement("SELECT * FROM Playlist WHERE playlistname=? AND userID=?");
			ps.setString(1, playlistname);
			ps.setString(2, SelectedUserName);
			ResultSet rs = ps.executeQuery();
			if (!rs.next()) { // if playlist doesn't exist
				// get filepath
				rs.close(); 
				ps.setString(2, currentUserName);
				rs = ps.executeQuery();
				if (rs.next()) { // if playlist exists
					// Get playlistID
					Integer playlistID = rs.getInt("playlistID");
					// Insert into Playlist Table
					String filepath = rs.getString("filepath");
					ps = conn.prepareStatement("INSERT INTO Playlist (playlistname, userID, filepath) VALUES (?,?,?)");
					ps.setString(1, playlistname);
					ps.setString(2, SelectedUserName);
					ps.setString(3, filepath);
					int added = ps.executeUpdate();
					// Insert into PlaylistContent Table
					ps = conn.prepareStatement("SELECT * FROM PlaylistContent WHERE playlistID=?");	
					rs.close();
					ps.setInt(1, playlistID);
					rs = ps.executeQuery();
					while (!rs.next()) {
						PreparedStatement ps2 = conn.prepareStatement("INSERT INTO PlaylistContent (playlistID, songIndex, songName, songArtist) VALUES (?,?,?,?)");
						ps2.setInt(1, playlistID);
						ps2.setInt(2, rs.getInt("songIndex"));
						ps2.setString(3, rs.getString("songName"));
						ps2.setString(4, rs.getString("songArtist"));
						ps.executeUpdate();
					}
					if (added == 1)
						copied = true;
				}
			} 
			rs.close();
		} catch (SQLException sqle) {
			System.out.println("sqle: " + sqle.getMessage());
		} catch (ClassNotFoundException cnfe) {
			System.out.println("cnfe: " + cnfe.getMessage());
		} finally {
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException sqle) {
				System.out.println("sqle closing conn: " + sqle.getMessage());
			}
		}
	
		return copied;
		
	}
	
	// TODO
	// deletePlaylist
	// getPlaylist
	// getPlaylists
	// getFollowing
	
	
	
	// Internal Functions
	private String hashPassword(String password) {
		// hash password
		String hashedPassword = null;
		try {
			MessageDigest md = MessageDigest.getInstance("MD5");
			md.update(password.getBytes());
			byte[] bytes = md.digest();
			StringBuilder sb = new StringBuilder();
            for(int i=0; i< bytes.length ;i++)
            {
                sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
            }
            //Get complete hashed password in hex format
            hashedPassword = sb.toString();
		} catch (NoSuchAlgorithmException NSAE) {
			System.out.println("NSAE: " + NSAE.getMessage());
		}
		
		return hashedPassword;
	}
	
}
